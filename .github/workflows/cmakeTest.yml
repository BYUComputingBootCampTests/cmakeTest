name: CMake Test

on: 
  repository_dispatch:
    types: 
      [test_pr]

jobs:
  runTests:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v2

    - name: Setup Node.js environment
      uses: actions/setup-node@v2.1.5

    - name: Install octokit/core.js
      run: npm install @octokit/core
    
    - name: Install xmlhttprequest
      run: npm install xmlhttprequest
    
      #Get Repository that isn't currently being checked
    - name: Get a Pull Request's Repo Name that isn't already being checked
      run: node .cbc/getRepoInfo.js ${{ secrets.AUTH_TOKEN }} full_name > repo.txt

    - name: Save Repository name as Output Variable
      id: repo
      uses: juliangruber/read-file-action@v1
      with:
        path: repo.txt
    
    - name: Get the Pull Request's Number
      run: node .cbc/getRepoInfo.js ${{ secrets.AUTH_TOKEN }} number > number.txt

    - name: Save Repository Number as Output Variable
      id: number
      uses: juliangruber/read-file-action@v1
      with:
        path: number.txt

    - name: Add "currentlyBeingChecked" label
      run: node .cbc/addLabel.js ${{ secrets.AUTH_TOKEN }} ${{ steps.number.outputs.content }} currentlyBeingChecked

      #Add CMake tests below this line

      #Problem 1 Testing
    - name: Problem 1, Get root CMakeLists.txt
      id: p1getCMakeLists1
      run: node .cbc/getFile.js ${{ secrets.AUTH_TOKEN }} ${{ steps.repo.outputs.content }} problem1/CMakeLists.txt > problem1/CMakeLists.txt

    - name: Comment
      run: node .cbc/makeComment.js ${{ secrets.AUTH_TOKEN }} ${{ steps.number.outputs.content }} "Problem 1, CMakeLists.txt found in root"

    - name: Problem 1, Get harp CMakeLists.txt
      id: p1getCMakeLists2
      run: node .cbc/getFile.js ${{ secrets.AUTH_TOKEN }} ${{ steps.repo.outputs.content }} problem1/harp/CMakeLists.txt > problem1/harp/CMakeLists.txt

    - name: Comment
      run: node .cbc/makeComment.js ${{ secrets.AUTH_TOKEN }} ${{ steps.number.outputs.content }} "Problem 1, CMakeLists.txt found in harp"

    - name: Problem 1, Get lib CMakeLists.txt
      id: p1getCMakeLists3
      run: node .cbc/getFile.js ${{ secrets.AUTH_TOKEN }} ${{ steps.repo.outputs.content }} problem1/lib/CMakeLists.txt > problem1/lib/CMakeLists.txt

    - name: Comment
      run: node .cbc/makeComment.js ${{ secrets.AUTH_TOKEN }} ${{ steps.number.outputs.content }} "Problem 1, CMakeLists.txt found in lib"

    - name: Problem 1, Create Build
      id: p1build
      run: |
        cd problem1
        mkdir build
        cd build

    - name: Comment
      run: node .cbc/makeComment.js ${{ secrets.AUTH_TOKEN }} ${{ steps.number.outputs.content }} "Problem 1, Build directory created"

    - name: Problem 1, Run CMake
      id: p1runCMake
      run: |
        cd problem1/build
        cmake ..   

    - name: Comment
      run: node .cbc/makeComment.js ${{ secrets.AUTH_TOKEN }} ${{ steps.number.outputs.content }} "Problem 1, Makefile created"

    - name: Problem 1, Run Make
      id: p1runMake
      run: |
        cd problem1/build
        make

    - name: Comment
      run: node .cbc/makeComment.js ${{ secrets.AUTH_TOKEN }} ${{ steps.number.outputs.content }} "Problem 1, Makefile ran"

    #BEGINNING
    - name: Problem 1, Run program
      id: p1runProgram
      run: ./problem1/build/perform > output.log

    - name: Comment
      run: node .cbc/makeComment.js ${{ secrets.AUTH_TOKEN }} ${{ steps.number.outputs.content }} "Problem 1, Executable ran"

    - name: Problem 1, Read Output
      id: p1output
      uses: juliangruber/read-file-action@v1
      with:
        path: output.log

    - name: Problem 1, Assert Proper Output
      id: p1properOutput
      uses: therussiankid92/gat@v1.5
      with:
        assertion: should.equal
        actual: ${{ steps.p1output.outputs.content }}
        expected: ${{ secrets.PROGRAM_OUTPUT1 }}
    #END

    #NEW
    - name: Problem 1, Save Harp CMakeLists
      id: p1SaveHarpCMakeLists
      run: cat problem1/harp/CMakeLists.txt > output.log

    - name: Problem 1, Read Harp CMakeLists
      id: p1ReadHarpCMakeLists
      uses: juliangruber/read-file-action@v1
      with:
        path: output.log

    - name: Problem 1, Assert Proper Harp CMakeLists
      id: p1ProperHarpCMakeLists
      uses: therussiankid92/gat@v1.5
      with:
        assertion: should.equal
        actual: ${{ steps.p1ReadHarpCMakeLists.outputs.content }}
        expected: ${{ secrets.HARP_CMAKELISTS }}

    - name: Comment
      run: node .cbc/makeComment.js ${{ secrets.AUTH_TOKEN }} ${{ steps.number.outputs.content }} "Problem 1, Harp CMakeLists has not been modified"
    #EDN

    #MORE NEW
    - name: Problem 1, Save Lib CMakeLists
      id: p1SaveLibCMakeLists
      run: cat problem1/lib/CMakeLists.txt > output.log

    - name: Problem 1, Read Lib CMakeLists
      id: p1ReadLibCMakeLists
      uses: juliangruber/read-file-action@v1
      with:
        path: output.log

    - name: Problem 1, Assert Proper Lib CMakeLists
      id: p1ProperLibCMakeLists
      uses: therussiankid92/gat@v1.5
      with:
        assertion: should.equal
        actual: ${{ steps.p1ReadLibCMakeLists.outputs.content }}
        expected: ${{ secrets.LIB_CMAKELISTS }}

    - name: Comment
      run: node .cbc/makeComment.js ${{ secrets.AUTH_TOKEN }} ${{ steps.number.outputs.content }} "Problem 1, Lib CMakeLists has not been modified"
    #MORE END

    #Last New
    - name: Assert CMake Instructions
      id: assertCMakeInstructions
      run: node .cbc/assertContains.js problem1/CMakeLists.txt "include_directories,add_executable"

    - name: Assert Executable
      id: assertExecutable
      run: node .cbc/assertContains.js problem1/CMakeLists.txt "perform"
    #Last End
    
    - name: Comment
      run: node .cbc/makeComment.js ${{ secrets.AUTH_TOKEN }} ${{ steps.number.outputs.content }} "Problem 1, Executable output is correct"

    - name: Problem 1, Make clean
      id: p1makeClean
      run: |
        cd problem1/build
        make clean

    - name: Comment
      run: node .cbc/makeComment.js ${{ secrets.AUTH_TOKEN }} ${{ steps.number.outputs.content }} "Problem 1, Makefile clean function ran"

    - name: Problem 1, Find File
      continue-on-error: true
      run: |
        cd problem1/build
        echo "Found? " > clean.txt
        test -f tree && echo "Yes" >> clean.txt

    - name: Problem 1, Read Find Output
      id: p1find
      uses: juliangruber/read-file-action@v1
      with:
        path: problem1/build/clean.txt

    - name: Problem 1, Assert File Gone
      id: p1fileGone
      uses: therussiankid92/gat@v1.5
      with:
        assertion: should.equal
        actual: ${{ steps.p1find.outputs.content }}
        expected: Found?
    
    - name: Comment
      run: node .cbc/makeComment.js ${{ secrets.AUTH_TOKEN }} ${{ steps.number.outputs.content }} "Problem 1, Makefile clean function deleted the tree executable"

      #Problem 2 Testing
    - name: Problem 2, Get root CMakeLists.txt
      id: p2getCMakeLists1
      run: node .cbc/getFile.js ${{ secrets.AUTH_TOKEN }} ${{ steps.repo.outputs.content }} problem2/CMakeLists.txt > problem2/CMakeLists.txt

    - name: Comment
      run: node .cbc/makeComment.js ${{ secrets.AUTH_TOKEN }} ${{ steps.number.outputs.content }} "Problem 2, CMakeLists.txt found in root"

    - name: Problem 2, Get apps CMakeLists.txt
      id: p2getCMakeLists2
      run: node .cbc/getFile.js ${{ secrets.AUTH_TOKEN }} ${{ steps.repo.outputs.content }} problem2/apps/CMakeLists.txt > problem2/apps/CMakeLists.txt

    - name: Comment
      run: node .cbc/makeComment.js ${{ secrets.AUTH_TOKEN }} ${{ steps.number.outputs.content }} "Problem 2, CMakeLists.txt found in apps"

    - name: Problem 2, Get include CMakeLists.txt
      id: p2getCMakeLists3
      run: node .cbc/getFile.js ${{ secrets.AUTH_TOKEN }} ${{ steps.repo.outputs.content }} problem2/include/CMakeLists.txt > problem2/include/CMakeLists.txt

    - name: Comment
      run: node .cbc/makeComment.js ${{ secrets.AUTH_TOKEN }} ${{ steps.number.outputs.content }} "Problem 2, CMakeLists.txt found in include"

    - name: Problem 2, Create Build
      id: p2build
      run: |
        cd problem2
        mkdir build
        cd build

    - name: Comment
      run: node .cbc/makeComment.js ${{ secrets.AUTH_TOKEN }} ${{ steps.number.outputs.content }} "Problem 2, Build directory created"

    - name: Problem 2, Run CMake
      id: p2runCMake
      run: |
        cd problem2/build
        cmake ..   

    - name: Comment
      run: node .cbc/makeComment.js ${{ secrets.AUTH_TOKEN }} ${{ steps.number.outputs.content }} "Problem 2, Makefile created"

    - name: Problem 2, Run Make
      id: p2runMake
      run: |
        cd problem2/build
        make

    - name: Comment
      run: node .cbc/makeComment.js ${{ secrets.AUTH_TOKEN }} ${{ steps.number.outputs.content }} "Problem 2, Makefile ran"

    - name: Problem 2, Run program
      id: p2runProgram
      run: ./problem2/build/apps/hello > output.log

    - name: Comment
      run: node .cbc/makeComment.js ${{ secrets.AUTH_TOKEN }} ${{ steps.number.outputs.content }} "Problem 2, Executable ran"

    - name: Problem 2, Read Output
      id: p2output
      uses: juliangruber/read-file-action@v1
      with:
        path: output.log

    - name: Problem 2, Assert Proper Output
      id: p2properOutput
      uses: therussiankid92/gat@v1.5
      with:
        assertion: should.equal
        actual: ${{ steps.p2output.outputs.content }}
        expected: ${{ secrets.PROGRAM_OUTPUT2 }}
    
    - name: Comment
      run: node .cbc/makeComment.js ${{ secrets.AUTH_TOKEN }} ${{ steps.number.outputs.content }} "Problem 2, Executable output is correct"

    - name: Problem 2, Make clean
      id: p2makeClean
      run: |
        cd problem2/build
        make clean

    - name: Comment
      run: node .cbc/makeComment.js ${{ secrets.AUTH_TOKEN }} ${{ steps.number.outputs.content }} "Problem 2, Makefile clean function ran"

    - name: Problem 2, Find File
      continue-on-error: true
      run: |
        cd problem2/build
        echo "Found? " > clean.txt
        test -f tree && echo "Yes" >> clean.txt

    - name: Problem 2, Read Find Output
      id: p2find
      uses: juliangruber/read-file-action@v1
      with:
        path: problem2/build/clean.txt

    - name: Problem 2, Assert File Gone
      id: p2fileGone
      uses: therussiankid92/gat@v1.5
      with:
        assertion: should.equal
        actual: ${{ steps.p2find.outputs.content }}
        expected: Found?
    
    - name: Comment
      run: node .cbc/makeComment.js ${{ secrets.AUTH_TOKEN }} ${{ steps.number.outputs.content }} "Problem 2, Makefile clean function deleted the tree executable"

   # - name: Assert No Variables, Automatic Variables, Pattern Matching, or Makefile Functions in MakeFile1.txt
   #   id: assertNoVariables
   #   run: node .cbc/assertDoesNotContain.js Makefile "$,@,<,%,="
    
   # - name: Comment
   #   run: node .cbc/makeComment.js ${{ secrets.AUTH_TOKEN }} ${{ steps.number.outputs.content }} "Makefile1.txt doesn't contain Variables, Automatic Variables, Pattern Matching, or Makefile Functions"

      #Issue Badge -- Do not change!! 
    - name: Get email.txt
      id: getEmail
      run: node .cbc/getFile.js ${{ secrets.AUTH_TOKEN }} ${{ steps.repo.outputs.content }} email.txt > email.txt

    - name: Save Email as Output Variable
      id: userEmail
      uses: juliangruber/read-file-action@v1
      with:
        path: email.txt
    
    - name: Comment
      run: node .cbc/makeComment.js ${{ secrets.AUTH_TOKEN }} ${{ steps.number.outputs.content }} "Email found - ${{ steps.userEmail.outputs.content }}"

    - name: Issue Badge
      id: issueBadge
      run: node .cbc/badgeAPI.js ${{secrets.USERNAME}} ${{secrets.PASSWORD}} ${{ steps.userEmail.outputs.content }}
    
    - name: Comment
      run: node .cbc/makeComment.js ${{ secrets.AUTH_TOKEN }} ${{ steps.number.outputs.content }} "Badge Issued. Congratulations!"

      #Failure Output for Problem 1 -- change
    - name: Failure Comment
      if: always() && steps.p1getCMakeLists1.outcome == 'failure'
      run: node .cbc/makeComment.js ${{ secrets.AUTH_TOKEN }} ${{ steps.number.outputs.content }} "Problem 1 - Error - No CMakeLists.txt found in root"
    
    - name: Failure Comment
      if: always() && steps.p1getCMakeLists2.outcome == 'failure'
      run: node .cbc/makeComment.js ${{ secrets.AUTH_TOKEN }} ${{ steps.number.outputs.content }} "Problem 1 - Error - No CMakeLists.txt found in harp"

    - name: Failure Comment
      if: always() && steps.p1getCMakeLists3.outcome == 'failure'
      run: node .cbc/makeComment.js ${{ secrets.AUTH_TOKEN }} ${{ steps.number.outputs.content }} "Problem 1 - Error - No CMakeLists.txt found in lib"

    - name: Failure Comment
      if: always() && steps.p1build.outcome == 'failure'
      run: node .cbc/makeComment.js ${{ secrets.AUTH_TOKEN }} ${{ steps.number.outputs.content }} "Problem 1 - Error - Build directory not created"

    - name: Failure Comment
      if: always() && steps.p1runCMake.outcome == 'failure'
      run: node .cbc/makeComment.js ${{ secrets.AUTH_TOKEN }} ${{ steps.number.outputs.content }} "Problem 1 - Error - CMakeLists.txt failed"

    - name: Failure Comment
      if: always() && steps.p1runMake.outcome == 'failure'
      run: node .cbc/makeComment.js ${{ secrets.AUTH_TOKEN }} ${{ steps.number.outputs.content }} "Problem 1 - Error - Makefile didn't run"

    - name: Failure Comment
      if: always() && steps.p1runProgram.outcome == 'failure'
      run: node .cbc/makeComment.js ${{ secrets.AUTH_TOKEN }} ${{ steps.number.outputs.content }} "Problem 1 - Error - Executable crashed"
    
    - name: Failure Comment
      if: always() && steps.p1properOutput.outcome == 'failure'
      run: node .cbc/makeComment.js ${{ secrets.AUTH_TOKEN }} ${{ steps.number.outputs.content }} "Problem 1 - Error - Executable output was incorrect"

    - name: Failure Comment
      if: always() && steps.p1SaveHarpCMakeLists.outcome == 'failure'
      run: node .cbc/makeComment.js ${{ secrets.AUTH_TOKEN }} ${{ steps.number.outputs.content }} "Problem 1 - Error - Unable to save harp CMake file"
    
    - name: Failure Comment
      if: always() && steps.p1ProperHarpCMakeLists.outcome == 'failure'
      run: node .cbc/makeComment.js ${{ secrets.AUTH_TOKEN }} ${{ steps.number.outputs.content }} "Problem 1 - Error - Harp CMake file has been modified"

    - name: Failure Comment
      if: always() && steps.p1SaveLibCMakeLists.outcome == 'failure'
      run: node .cbc/makeComment.js ${{ secrets.AUTH_TOKEN }} ${{ steps.number.outputs.content }} "Problem 1 - Error - Unable to save lib CMake file"
    
    - name: Failure Comment
      if: always() && steps.p1ProperLibCMakeLists.outcome == 'failure'
      run: node .cbc/makeComment.js ${{ secrets.AUTH_TOKEN }} ${{ steps.number.outputs.content }} "Problem 1 - Error - Lib CMake file has been modified"

    - name: Failure Comment
      if: always() && steps.assertCMakeInstructions.outcome == 'failure'
      run: node .cbc/makeComment.js ${{ secrets.AUTH_TOKEN }} ${{ steps.number.outputs.content }} "Problem 1 - Error - Wrong CMake intructions in the main CMake file"

    - name: Failure Comment
      if: always() && steps.assertExecutable.outcome == 'failure'
      run: node .cbc/makeComment.js ${{ secrets.AUTH_TOKEN }} ${{ steps.number.outputs.content }} "Problem 1 - Error - Wrong executable name in the main CMake file"
    
    - name: Failure Comment
      if: always() && steps.p1makeClean.outcome == 'failure'
      run: node .cbc/makeComment.js ${{ secrets.AUTH_TOKEN }} ${{ steps.number.outputs.content }} "Problem 1 - Error - Makefile clean didn't run"

    - name: Failure Comment
      if: always() && steps.p1find.outcome == 'failure'
      run: node .cbc/makeComment.js ${{ secrets.AUTH_TOKEN }} ${{ steps.number.outputs.content }} "Problem 1 - Error - Couldn't find clean.txt"
    
    - name: Failure Comment
      if: always() && steps.p1fileGone.outcome == 'failure'
      run: node .cbc/makeComment.js ${{ secrets.AUTH_TOKEN }} ${{ steps.number.outputs.content }} "Problem 1 - Error - Makefile clean didn't delete the tree executable"
    
      #Failure Output for Problem 2 -- change
    - name: Failure Comment
      if: always() && steps.p2getCMakeLists1.outcome == 'failure'
      run: node .cbc/makeComment.js ${{ secrets.AUTH_TOKEN }} ${{ steps.number.outputs.content }} "Problem 2 - Error - No CMakeLists.txt found in root"
    
    - name: Failure Comment
      if: always() && steps.p2getCMakeLists2.outcome == 'failure'
      run: node .cbc/makeComment.js ${{ secrets.AUTH_TOKEN }} ${{ steps.number.outputs.content }} "Problem 2 - Error - No CMakeLists.txt found in apps"

    - name: Failure Comment
      if: always() && steps.p2getCMakeLists3.outcome == 'failure'
      run: node .cbc/makeComment.js ${{ secrets.AUTH_TOKEN }} ${{ steps.number.outputs.content }} "Problem 2 - Error - No CMakeLists.txt found in include"

    - name: Failure Comment
      if: always() && steps.p2build.outcome == 'failure'
      run: node .cbc/makeComment.js ${{ secrets.AUTH_TOKEN }} ${{ steps.number.outputs.content }} "Problem 2 - Error - Build directory not created"

    - name: Failure Comment
      if: always() && steps.p2runCMake.outcome == 'failure'
      run: node .cbc/makeComment.js ${{ secrets.AUTH_TOKEN }} ${{ steps.number.outputs.content }} "Problem 2 - Error - CMakeLists.txt failed"

    - name: Failure Comment
      if: always() && steps.p2runMake.outcome == 'failure'
      run: node .cbc/makeComment.js ${{ secrets.AUTH_TOKEN }} ${{ steps.number.outputs.content }} "Problem 2 - Error - Makefile didn't run"
    
    - name: Failure Comment
      if: always() && steps.p2runProgram.outcome == 'failure'
      run: node .cbc/makeComment.js ${{ secrets.AUTH_TOKEN }} ${{ steps.number.outputs.content }} "Problem 2 - Error - Executable crashed"
    
    - name: Failure Comment
      if: always() && steps.p2properOutput.outcome == 'failure'
      run: node .cbc/makeComment.js ${{ secrets.AUTH_TOKEN }} ${{ steps.number.outputs.content }} "Problem 2 - Error - Executable output was incorrect"
    
    - name: Failure Comment
      if: always() && steps.p2makeClean.outcome == 'failure'
      run: node .cbc/makeComment.js ${{ secrets.AUTH_TOKEN }} ${{ steps.number.outputs.content }} "Problem 2 - Error - Makefile clean didn't run"

    - name: Failure Comment
      if: always() && steps.p2find.outcome == 'failure'
      run: node .cbc/makeComment.js ${{ secrets.AUTH_TOKEN }} ${{ steps.number.outputs.content }} "Problem 2 - Error - Couldn't find clean.txt"
    
    - name: Failure Comment
      if: always() && steps.p2fileGone.outcome == 'failure'
      run: node .cbc/makeComment.js ${{ secrets.AUTH_TOKEN }} ${{ steps.number.outputs.content }} "Problem 2 - Error - Makefile clean didn't delete the tree executable"

    # - name: Failure Comment
    #   if: always() && steps.assertNoVariables.outcome == 'failure'
    #   run: node .cbc/makeComment.js ${{ secrets.AUTH_TOKEN }} ${{ steps.number.outputs.content }} "Error - Makefile has Variables, Automatic Variables, Pattern Matching, or Makefile Functions"

      #Failure Output for Issue Badge -- Probably don't change
    - name: Failure Comment
      if: always() && steps.getEmail.outcome == 'failure'
      run: node .cbc/makeComment.js ${{ secrets.AUTH_TOKEN }} ${{ steps.number.outputs.content }} "Error - No email.txt found"

    - name: Failure Comment
      if: always() && steps.issueBadge.outcome == 'failure'
      run: node .cbc/makeComment.js ${{ secrets.AUTH_TOKEN }} ${{ steps.number.outputs.content }} "Error - Badge issue failed - Email Address wasn't valid"

      #Close Pull Request -- Do not change!
    - name: Close Pull Request
      if: always()
      uses: peter-evans/close-pull@v1
      with:
        pull-request-number:  ${{ steps.number.outputs.content }}
        comment: Auto-closing pull request after submission
        delete-branch: false

    - name: Remove Previous Labels
      if: always()
      run: node .cbc/removeAllLabels.js ${{ secrets.AUTH_TOKEN }} ${{ steps.number.outputs.content }}
      
    - name: Add "checkComplete" label
      if: always()
      run: node .cbc/addLabel.js ${{ secrets.AUTH_TOKEN }} ${{ steps.number.outputs.content }} checkComplete
